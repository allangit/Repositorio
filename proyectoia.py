# -*- coding: utf-8 -*-
"""ProyectoIA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e9QHrDqClfhcISx_gpQ9464amevf7TWM
"""

import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
from keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPooling2D,UpSampling2D,BatchNormalization,Conv2DTranspose,LeakyReLU,Input,Reshape,Activation
from keras.models import Sequential,Model
from keras.datasets import fashion_mnist,mnist
import tensorflow as tf

#Separaci√≥n o split de dataset
(xtrain,ytrain),(xtest,ytest)=fashion_mnist.load_data()

#visualizar los datos
print(xtrain.shape)
print(ytrain.shape)
print(xtest.shape)
print(ytest.shape)

#visualizacion de datos
i=random.randint(0,59999)
plt.imshow(xtrain[i],cmap='gray')
plt.show()

width=10
height=10
fig,axes=plt.subplots(width,height,figsize=(15,15))
axes=axes.ravel()
for i in range(0,width*height):

  index=np.random.randint(0,59999)
  axes[i].imshow(xtrain[index],cmap='gray')
  axes[i].axis('off')

fig.subplots_adjust(hspace=0.5)

#preprocesar las imagenes
xtrain[0].min(),xtrain[0].max()

#formatear las imagenes
xtrain=xtrain/255
xtest=xtest/255

xtrain[0].min(),xtrain[0].max()

#xtrain, xtest
xtrain.shape,xtest.shape

xtrain.shape[0],xtrain.shape[1],xtrain.shape[2]

xtrain=xtrain.reshape(xtrain.shape[0],xtrain.shape[1]*xtrain.shape[2])
xtrain.shape

xtest=xtest.reshape(xtest.shape[0],xtest.shape[1]*xtest.shape[2])
xtest.shape

#784-128-64-32-64-128-784 red neuronal
#programming the autoencoder

autoencoder=Sequential()

#Encode

autoencoder.add(Dense(128,activation='relu',input_dim=784))
autoencoder.add(Dense(64,activation='relu'))
autoencoder.add(Dense(32,activation='relu'))

#decode

autoencoder.add(Dense(64,activation='relu'))
autoencoder.add(Dense(128,activation='relu'))
autoencoder.add(Dense(784,activation='sigmoid'))

autoencoder.summary()

autoencoder.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['accuracy'])

autoencoder.fit(xtrain,xtrain,epochs=100)

#Modelo de encoder
autoencoder.summary()

encoder=Model(inputs=autoencoder.input,outputs=autoencoder.get_layer('dense_2').output)

encoder.summary()

plt.imshow(xtrain[0].reshape(28,28),cmap='gray')

xtest[0].shape

xtest[0].reshape(1,-1).shape

encoded_image=encoder.predict(xtest[0].reshape(1,-1))

encoded_image,encoded_image.shape

plt.imshow(encoded_image.reshape(8,4),cmap='gray')

autoencoder.summary()

input_layer_decoder=Input(shape=(32,))
decoder_layer1=autoencoder.layers[3]
decoder_layer2=autoencoder.layers[4]
decoder_layer3=autoencoder.layers[5]
decoder=Model(inputs=input_layer_decoder, outputs=decoder_layer3(decoder_layer2(decoder_layer1(input_layer_decoder))))
decoder.summary()

decoded_images=decoder.predict(encoded_image)

decoded_images.shape

xtest.shape[0]

n_images=10
test_images=np.random.randint(0,xtest.shape[0]-1,size=n_images)
print(test_images)

plt.figure(figsize=(20,20))
for i, image_index in enumerate(test_images):

  #Original image
  print(i, image_index)
  ax=plt.subplot(10,10,i+1)
  plt.imshow(xtest[image_index].reshape(28,28),cmap='gray')
  plt.axis('off')

  #Coded images

  ax=plt.subplot(10,10,i+1+n_images)
  encoded_image=encoder.predict(xtest[image_index].reshape(1,-1))
  plt.imshow(encoded_image.reshape(8,4),cmap='gray')
  plt.axis('off')

  #Decoded Images

  ax=plt.subplot(10,10,i+1+2*n_images)
  plt.imshow(decoder.predict(encoded_image).reshape(28,28),cmap='gray')
  plt.axis('off')